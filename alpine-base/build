#!/bin/bash
# ------------------------------------------------------------------
# [Christian-Maximilian Steier]
# Build a small AlpineLinux Docker image based on gliderlabs         
# ------------------------------------------------------------------

DIR="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
NAMESPACE="maxder"
if [ $(uname -m) == "armv6l" ]; then
	DISTRO="rpi-alpine"
else
	DISTRO="alpine"
fi
IMAGENAME="${NAMESPACE}/${DISTRO}"
sed -i "s*PLACEHOLDER*${DISTRO}*g" $DIR/alpine-scratch/Makefile
sed -i "s*PLACEHOLDER*${DISTRO}*g" $DIR/Dockerfile

# Init
FILE="/tmp/out.$$"
GREP="/bin/grep"
#....
# Make sure only root can run our script
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

cd $DIR/alpine-scratch && make

mkdir $DIR/tmp && cd $DIR/tmp
git clone https://github.com/gliderlabs/docker-alpine.git docker-alpine-gliderlabs
cd $DIR/tmp/docker-alpine-gliderlabs

echo "Set builder images to FROM ${IMAGENAME}-scratch"
sed -i "/FROM/ s:.*:FROM ${IMAGENAME}-scratch:" builder/Dockerfile
docker build --rm -t ${IMAGENAME}-builder:edge builder

echo "build library alpine"
docker run --name alpine-build-edge ${IMAGENAME}-builder:edge -s -t UTC -r edge -m http://dl-4.alpinelinux.org/alpine > ./versions/library-edge/rootfs.tar.gz
docker build --rm -t ${IMAGENAME}:edge versions/library-edge

echo "build alpine-mini based on gliderlabs/alpine"
docker rm alpine-build-edge
docker run --name alpine-build-edge ${IMAGENAME}-builder:edge -s -c -t UTC -r edge -m http://alpine.gliderlabs.com/alpine > ./versions/gliderlabs-edge/rootfs.tar.gz
docker  build --rm -t ${IMAGENAME}-mini:edge versions/gliderlabs-edge
cd $DIR && docker build --rm -t ${IMAGENAME}-base:edge .

rm -r $DIR/tmp
docker rm -f alpine-build-edge
docker rmi ${IMAGENAME}:edge
docker rmi ${IMAGENAME}-builder:edge
docker rmi ${IMAGENAME}-scratch:edge
docker rmi ${IMAGENAME}-scratch:latest
docker rmi ${IMAGENAME}-mini:edge
#docker rmi $(docker images -q -f dangling=true)
docker images

exit 0
